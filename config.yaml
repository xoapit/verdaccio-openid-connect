# path to a directory with all packages
storage: /verdaccio/storage/data
# path to a directory with plugins to include
plugins: /verdaccio/plugins

auth:
  openid-connect2:
    publicUrl: http://localhost:4873

    ###
    # when set redis storage (for sessions and tokens) will be used.
    # see also: fs_session_store_path, fs_token_store_path.
    redisUri: redis

    ###
    # session files (persistent) storage path and token files (temporary for short-lived files) storage path: will be used if redisUri not set
    #fsSessionStorePath: /tmp
    #fsTokenStorePath: /tmp

    issuer: https://keycloak/auth/realms/MyRealm/
    clientId: verdaccio
    clientSecret: '...'
    scope: 'openid profile email offline_access'
    usernameClaim: preferred_username

    # optional roles claim (id_token).
    # claim can be array or string (comma-separated)
    rolesClaim: roles

web:
  title: Verdaccio

uplinks:
  npmjs:
    url: https://registry.npmjs.org/

## uncomment to use modern jwt token system ( https://verdaccio.org/docs/configuration/#security )
#
# security:
#   api:
#     jwt:
#       sign:
#         # lifetime for [cli-to-verdaccio service] jwt tokens that link to oidc server tokens (using sid claim).
#         # oidc server tokens lifetime (set by oidc server) check as usual after check [cli-to-verdaccio service] jwt token sign and expiration.
#         # if oidc server returns refresh_token, oidc access_token will refresh when expired.
#         expiresIn: 30d
#   web:
#     sign:
#       expiresIn: 7d

packages:
  '@*/*':
    # scoped packages
    access: $authenticated
    publish: $authenticated
  '**':
    access: $authenticated
    publish: $authenticated

middlewares:
  audit:
    enabled: true
logs:
  - {type: stdout, format: pretty, level: info}
